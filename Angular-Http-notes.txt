1. HttpClient is a injectable class to make http request. All HttpClient methods construct Observable instance and make HTTP requests when they are subscribed.
    post: Performs HTTP POST request.
    get: Performs HTTP GET request.
    put: Performs HTTP PUT request.
    delete: Performs HTTP DELETE request.
    patch: Performs HTTP PATCH request.
    head: Performs HTTP HEAD request. Same as GET, but transfers the status line and header section only.
    options: Performs HTTP OPTIONS request. Describes the communication options like the method refers to get 0r post for the target resource.
    request: Performs any type of HTTP request.
    jsonp: Performs HTTP JSONP request.
    1. CREATE operation using HttpClient.post method.
        1.1  HttpClient.post() constructs an Observable instance and performs HTTP POST operation when it is subscribed
        1.2  post(url, body, options): Observable<any> 
            Url: this is rest service URL
            body: This is the object that will be passed over http request
            Options: Can pass option such as headers, parametes etc. This argument is optional.
                    headers: Defines HttpHeaders for http POST request.
                    params: Defines parameters in URL.
                    responseType: Defines response type such as arraybuffer, blob, json and text.
                    withCredentials: Defines whether we want to pass credentials or not.
        1.3  

    2. READ operation using HttpClient.get method.
        2.1 get(url, options): Observable<any>
            url: This is the REST web service URL to fetch article.
            options: We can pass options such as headers, parameters etc. This argument is optional.
    3. UPDATE operation using HttpClient.put method.
        3.1 put(url, body, options): Observable<any>
            url: This is the URL to update article.
            body: This is the object that will be passed over HTTP request.
            options: We can pass options such as headers, parameters etc. This argument is optional.
    4. DELETE operation using HttpClient.delete method.
            delete(url, options): Observable<any> 
            url: This is the URL to delete article.
            options: We can pass options such as headers, parameters etc. This argument is optional.
2. HttpClientModule - To use HttpClient class, we need to import HttpClientModule in application module. HttpClientModule is from @angular/common/http library.
3. HTTP Headers let the client and the server share additional information about the HTTP request or response. For example, we use the content-type header to indicate the media type of the resource like JSON, text, blob, et
        const headers= new HttpHeaders()
        .set('content-type', 'application/json')
        .set('Access-Control-Allow-Origin', '*');
4. File Upload
     const formData: FormData = new FormData();
    formData.append('files',file);
    const headers = new HttpHeaders();
    headers.set('responsetype','application/json');
    headers.append('reportProgress','true');
    const req = new HttpRequest('POST','http://localhost:1000/upload',formData,{headers:headers});
    return this.http.request(req);
5. File Download
    download(file: string | undefined): Observable<Blob> {
    return this.http.get(`${environment.baseUrl}/files/${file}`, {
      responseType: 'blob'
    });
  }